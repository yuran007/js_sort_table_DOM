{"version":3,"sources":["scripts/main.js"],"names":["table","document","body","querySelector","children","tableHeaders","tableBody","tableFooters","sortTable","tableData","sortKey","arrheaders","headers","sortIndex","map","row","cell","textContent","indexOf","rows","sort","a","b","compare","row2","index","aTxt","cells","bTxt","salaryToNumber","salary","Number","slice","split","join","localeCompare","employe","append","clickHandker","e","target","addEventListener"],"mappings":";AAAA,aAuCA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EArCA,IAAMA,EAAQC,SAASC,KAAKC,cAAc,SACUH,EAAAA,EAAAA,EAAMI,UAAnDC,EAAAA,EAAAA,GAAcC,EAAAA,EAAAA,GAAWC,EAAAA,EAAAA,GAE1BC,EAAY,SAACC,EAAWC,GACtBC,IAAaC,EAuBbC,GAvBaD,EAuBUP,EAvBC,EACzBO,EAAQR,UACVU,IAAI,SAAAC,GAAO,OAAA,EAAIA,EAAIX,UACjBU,IAAI,SAAAE,GAAQA,OAAAA,EAAKC,gBAAc,IAoBOC,QAAQR,GAE/CD,EAAAA,EAAUU,MACXC,KAAK,SAACC,EAAGC,GAAMC,OArBKC,EAqBMF,EArBAG,EAqBGZ,EApBxBa,EAoBkBL,EApBNM,MAAMF,GAAOR,YACzBW,EAAOJ,EAAKG,MAAMF,GAAOR,YAEzBY,EAAiB,SAAAC,GAAUC,OAAAA,OAC/BD,EAAOE,MAAM,GAAGC,MAAM,KAAKC,KAAK,MAEpB,IAAVT,GAAyB,IAAVA,EACVC,EAAKS,cAAcP,GAGd,IAAVH,EACKM,OAAOL,GAAQK,OAAOH,GAGxBC,EAAeH,GAAQG,EAAeD,GAf/B,IAAOJ,EAAMC,EACrBC,EACAE,EAEAC,IAkBLf,IAAI,SAAAsB,GAAW3B,OAAAA,EAAU4B,OAAOD,MAG/BE,EAAe,SAAAC,GAAK/B,OAAAA,EAAUF,EAAWiC,EAAEC,OAAOvB,cAExDZ,EAAaoC,iBAAiB,QAASH,GACvC/B,EAAakC,iBAAiB,QAASH","file":"main.f3415558.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.body.querySelector('table');\nconst [tableHeaders, tableBody, tableFooters] = [...table.children];\n\nconst sortTable = (tableData, sortKey) => {\n  const arrheaders = headers => [\n    ...headers.children]\n    .map(row => [...row.children]\n      .map(cell => cell.textContent))[0];\n\n  const compare = (row1, row2, index) => {\n    const aTxt = row1.cells[index].textContent;\n    const bTxt = row2.cells[index].textContent;\n\n    const salaryToNumber = salary => Number(\n      salary.slice(1).split(',').join(''));\n\n    if (index === 0 || index === 1) {\n      return aTxt.localeCompare(bTxt);\n    }\n\n    if (index === 2) {\n      return Number(aTxt) - Number(bTxt);\n    }\n\n    return salaryToNumber(aTxt) - salaryToNumber(bTxt);\n  };\n\n  const sortIndex = arrheaders(tableHeaders).indexOf(sortKey);\n\n  [...tableData.rows]\n    .sort((a, b) => compare(a, b, sortIndex))\n    .map(employe => tableData.append(employe));\n};\n\nconst clickHandker = e => sortTable(tableBody, e.target.textContent);\n\ntableHeaders.addEventListener('click', clickHandker);\ntableFooters.addEventListener('click', clickHandker);\n"]}